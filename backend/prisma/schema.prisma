// This is your Prisma schema file,1
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CoursesStatus {
  pending // open course
  fundraising // success before fundraise end date
  successFunding
  rejected
  on_Board
  off_board
}

enum SectionContentType {
  video
  text
}

enum ArticleStatus {
  pending
  rejected
  on_Board
  off_board
}

enum CourseOrdersStatus {
  pending
  successed
  returned
  cancelled
}

enum PaymentMethod {
  visa
  master
  alipay
  octopus
}

model Users {
  id            Int             @id @default(autoincrement())
  username      String          @unique @db.VarChar(255)
  password      String          @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  phoneNumber   String?         @unique @map("phone_number") @db.VarChar(255)
  isAdmin       Boolean         @default(false) @map("is_admin")
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamp()
  courses       Courses[]
  userProfiles  UserProfiles[]
  reviews       Reviews[]
  posts         Posts[]
  redeemCoupons RedeemCoupons[]
  courseOrders  CourseOrders[]
  shoppingCarts ShoppingCarts[]
  handclaps     Handclaps[]
  bookMarks     BookMarks[]
  works         Works[]
  announcements Announcements[]
  articles      Articles[]

  @@map("users")
}

model Courses {
  id                    Int                     @id @default(autoincrement())
  status                CoursesStatus           @default(pending)
  owner                 Users                   @relation(fields: [ownerId], references: [id])
  ownerId               Int                     @map("owner_id")
  name                  String                  @db.VarChar(255)
  sellingPrice          Int                     @map("selling_price")
  courseMinimumSize     Int?                    @map("course_minimum_size")
  courseTotalDuration   Int                     @map("course_total_duration")
  courseImage           String?                 @map("course_image") @db.VarChar(255)
  courseIntroVideo      String?                 @map("course_intro_video") @db.VarChar(255)
  longDescription       String                  @map("long_description") @db.Text
  shortDescription      String                  @map("short_description") @db.Text
  fundraisePrice        Int?                    @map("fundraise_price")
  fundraiseStartDate    DateTime?               @map("fundraise_start_date") @db.Timestamp()
  fundraiseEndDate      DateTime?               @map("fundraise_end_date") @db.Timestamp()
  courseStartDate       DateTime?               @map("course_start_date") @db.Timestamp()
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  reviews               Reviews[]
  posts                 Posts[]
  courseOrderDetails    CourseOrderDetails[]
  shoppingCarts         ShoppingCarts[]
  categoriesCoursesMap  CategoriesCoursesMap[]
  bookMarks             BookMarks[]
  chapters              Chapters[]
  announcementsContents AnnouncementsContents[]

  @@map("courses")
}

model Chapters {
  id              Int        @id @default(autoincrement())
  course          Courses    @relation(fields: [courseId], references: [id])
  courseId        Int        @map("course_id")
  chapterName     String?    @map("chapter_name") @db.VarChar(255)
  chapterOrderNum Int        @map("chapter_order_num")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  sections        Sections[]

  @@map("chapters")
}

model Sections {
  id              Int                 @id @default(autoincrement())
  chapter         Chapters            @relation(fields: [chapterId], references: [id])
  chapterId       Int                 @map("chapter_id")
  sectionName     String?             @map("chapter_name") @db.VarChar(255)
  contentType     SectionContentType? @map("content_type")
  content         String?             @db.Text
  sectionOrderNum Int                 @map("section_order_num")
  isLocked        Boolean             @default(true) @map("is_locked")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  works           Works[]

  @@map("sections")
}

model Works {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  section   Sections @relation(fields: [sectionId], references: [id])
  sectionId Int      @map("section_id")
  workImage String?  @map("work_image") @db.VarChar(255)
  content   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("works")
}

model Categories {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  coverImage            String                  @map("cover_image") @db.VarChar(255)
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  articles              Articles[]
  categoriesProfilesMap CategoriesProfilesMap[]
  categoriesCoursesMap  CategoriesCoursesMap[]

  @@map("categories")
}

model Articles {
  id         Int           @id @default(autoincrement())
  status     ArticleStatus @default(pending)
  title      String        @db.VarChar(255)
  content    String        @db.Text
  coverImage String        @db.VarChar(255)
  owner      Users         @relation(fields: [ownerId], references: [id])
  ownerId    Int           @map("owner_id")
  category   Categories?    @relation(fields: [categoryId], references: [id])
  categoryId Int?           @map("category_id")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  handclaps  Handclaps[]
  bookMarks  BookMarks[]

  @@map("articles")
}

model Handclaps {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  article   Articles @relation(fields: [articleId], references: [id])
  articleId Int      @map("article_id")
  count     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("handclaps")
}

model UserProfiles {
  id                    Int                     @id @default(autoincrement())
  user                  Users                   @relation(fields: [userId], references: [id])
  userId                Int                     @map("user_id")
  icon                  String?                 @db.VarChar(255)
  coverImage            String?                 @map("cover_image") @db.VarChar(255)
  name                  String?                 @db.VarChar(255)
  description           String?                 @db.Text
  gender                String?                 @db.VarChar(255)
  dateOfBirth           DateTime?                @map("date_of_birth") @db.Date
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  categoriesProfilesMap CategoriesProfilesMap[]

  @@map("user_profiles")
}

model CategoriesProfilesMap {
  id            Int          @id @default(autoincrement())
  userProfile   UserProfiles @relation(fields: [userProfileId], references: [id])
  userProfileId Int          @map("user_profile_id")
  catrgory      Categories   @relation(fields: [catrgoryId], references: [id])
  catrgoryId    Int          @map("catrgory_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@map("categories_profiles_map")
}

model CategoriesCoursesMap {
  id         Int        @id @default(autoincrement())
  course     Courses    @relation(fields: [courseId], references: [id])
  courseId   Int        @map("course_id")
  catrgory   Categories @relation(fields: [catrgoryId], references: [id])
  catrgoryId Int        @map("catrgory_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("categories_courses_map")
}

model Reviews {
  id           Int      @id @default(autoincrement())
  user         Users    @relation(fields: [userId], references: [id])
  userId       Int      @map("user_id")
  course       Courses  @relation(fields: [courseId], references: [id])
  courseId     Int      @map("course_id")
  content      String   @db.Text
  courseRating Decimal  @map("course_rating") @db.Decimal(2, 1)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model Posts {
  id          Int      @id @default(autoincrement())
  user        Users    @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id")
  course      Courses  @relation(fields: [courseId], references: [id])
  courseId    Int      @map("course_id")
  replyPostId Int?     @map("reply_post_id")
  content     String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Coupons {
  id             Int             @id @default(autoincrement())
  promocode      String          @unique @db.VarChar(255)
  name           String          @unique @db.VarChar(255)
  discountAmount Int             @map("discount_amount")
  quantity       Int
  startAt        DateTime        @map("start_at") @db.Timestamp()
  endAt          DateTime        @map("end_at") @db.Timestamp()
  isActive       Boolean         @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  redeemCoupons  RedeemCoupons[]

  @@map("coupons")
}

model RedeemCoupons {
  id          Int            @id @default(autoincrement())
  user        Users          @relation(fields: [userId], references: [id])
  userId      Int            @map("user_id")
  coupon      Coupons        @relation(fields: [couponId], references: [id])
  couponId    Int            @map("coupon_id")
  isUsed      Boolean        @default(false) @map("is_used")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  courseOrder CourseOrders[]

  @@map("redeem_coupons")
}

model CourseOrders {
  id                 Int                  @id @default(autoincrement())
  status             CourseOrdersStatus   @default(pending)
  receiptNumber      Int                  @unique @default(autoincrement()) @map("receipt_number")
  user               Users                @relation(fields: [userId], references: [id])
  userId             Int                  @map("user_id")
  orderTime          DateTime             @default(now()) @db.Date
  paymentMethod      PaymentMethod
  redeemCoupon       RedeemCoupons?       @relation(fields: [redeemCouponId], references: [id])
  redeemCouponId     Int?                 @map("redeem_coupon_id")
  totalAmount        Decimal              @db.Decimal(10, 2)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  courseOrderDetails CourseOrderDetails[]

  @@map("course_orders")
}

model CourseOrderDetails {
  id            Int           @id @default(autoincrement())
  courseOrder   CourseOrders  @relation(fields: [courseOrderId], references: [id])
  courseOrderId Int           @map("course_order_id")
  course        Courses       @relation(fields: [courseId], references: [id])
  courseId      Int           @map("course_id")
  course_price  Int
  coursesStatus CoursesStatus @map("course_status")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("course_order_details")
}

model ShoppingCarts {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  course    Courses  @relation(fields: [courseId], references: [id])
  courseId  Int      @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("shopping_carts")
}

model BookMarks {
  id        Int       @id @default(autoincrement())
  user      Users     @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  course    Courses?  @relation(fields: [courseId], references: [id])
  courseId  Int?      @map("course_id")
  article   Articles? @relation(fields: [articleId], references: [id])
  articleId Int?      @map("article_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("bookmarks")
}

model AnnouncementsContents {
  id            Int             @id @default(autoincrement())
  tag           String          @db.VarChar(255)
  title         String          @db.VarChar(255)
  content       String          @db.Text
  course        Courses         @relation(fields: [courseId], references: [id])
  courseId      Int             @map("course_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  announcements Announcements[]

  @@map("announcements_contents")
}

model Announcements {
  id                    Int                   @id @default(autoincrement())
  announcementContent   AnnouncementsContents @relation(fields: [announcementContentId], references: [id])
  announcementContentId Int                   @map("announcement_count_id")
  toUser                Users                 @relation(fields: [toUserId], references: [id])
  toUserId              Int                   @map("to_user_id")
  fromUserId            Int                   @map("from_user_id")
  isRead                Boolean               @default(false) @map("is_read")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  @@map("announcements")
}
